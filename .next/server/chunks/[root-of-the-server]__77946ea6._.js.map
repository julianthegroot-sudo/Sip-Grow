{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 145, "column": 0}, "map": {"version":3,"sources":["file:///Users/juliandegroot/Documents/Sip%26Grow2/src/app/api/contact/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport nodemailer from 'nodemailer';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { name, email, company, subject, message } = body;\n\n    // Validate required fields\n    if (!name || !email || !subject || !message) {\n      return NextResponse.json(\n        { error: 'Missing required fields' },\n        { status: 400 }\n      );\n    }\n\n    // Validate email format\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(email)) {\n      return NextResponse.json(\n        { error: 'Invalid email format' },\n        { status: 400 }\n      );\n    }\n\n    // Check if environment variables are set\n    if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {\n      console.error('Missing email environment variables');\n      return NextResponse.json(\n        { error: 'Email service not configured. Please contact the administrator.' },\n        { status: 500 }\n      );\n    }\n\n    // Create transporter (using Gmail SMTP)\n    const transporter = nodemailer.createTransport({\n      service: 'gmail',\n      auth: {\n        user: process.env.EMAIL_USER,\n        pass: process.env.EMAIL_PASS,\n      },\n    });\n\n    // Email content\n    const mailOptions = {\n      from: process.env.EMAIL_USER,\n      to: 'julianthegroot@gmail.com',\n      subject: `Contact Form: ${subject}`,\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2 style=\"color: #16a34a; border-bottom: 2px solid #16a34a; padding-bottom: 10px;\">\n            New Contact Form Submission\n          </h2>\n          \n          <div style=\"background-color: #f9fafb; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n            <h3 style=\"color: #374151; margin-top: 0;\">Contact Information</h3>\n            <p><strong>Name:</strong> ${name}</p>\n            <p><strong>Email:</strong> ${email}</p>\n            ${company ? `<p><strong>Company:</strong> ${company}</p>` : ''}\n            <p><strong>Subject:</strong> ${subject}</p>\n          </div>\n          \n          <div style=\"background-color: #ffffff; padding: 20px; border: 1px solid #e5e7eb; border-radius: 8px;\">\n            <h3 style=\"color: #374151; margin-top: 0;\">Message</h3>\n            <p style=\"line-height: 1.6; color: #4b5563;\">${message.replace(/\\n/g, '<br>')}</p>\n          </div>\n          \n          <div style=\"margin-top: 20px; padding: 15px; background-color: #f0f9ff; border-left: 4px solid #0ea5e9; border-radius: 4px;\">\n            <p style=\"margin: 0; color: #0369a1; font-size: 14px;\">\n              <strong>Reply to:</strong> ${email}\n            </p>\n          </div>\n        </div>\n      `,\n    };\n\n    // Send email\n    await transporter.sendMail(mailOptions);\n\n    return NextResponse.json(\n      { message: 'Email sent successfully' },\n      { status: 200 }\n    );\n\n  } catch (error) {\n    console.error('Error sending email:', error);\n    \n    // Provide more specific error messages\n    let errorMessage = 'Failed to send email';\n    if (error instanceof Error) {\n      if (error.message.includes('Invalid login')) {\n        errorMessage = 'Invalid email credentials. Please check your email configuration.';\n      } else if (error.message.includes('Authentication failed')) {\n        errorMessage = 'Email authentication failed. Please verify your credentials.';\n      } else {\n        errorMessage = `Email error: ${error.message}`;\n      }\n    }\n    \n    return NextResponse.json(\n      { error: errorMessage },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG;QAEnD,2BAA2B;QAC3B,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC,SAAS;YAC3C,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAElB;QAEA,wBAAwB;QACxB,MAAM,aAAa;QACnB,IAAI,CAAC,WAAW,IAAI,CAAC,QAAQ;YAC3B,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuB,GAChC;gBAAE,QAAQ;YAAI;QAElB;QAEA,yCAAyC;QACzC,IAAI,CAAC,QAAQ,GAAG,CAAC,UAAU,IAAI,CAAC,QAAQ,GAAG,CAAC,UAAU,EAAE;YACtD,QAAQ,KAAK,CAAC;YACd,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAkE,GAC3E;gBAAE,QAAQ;YAAI;QAElB;QAEA,wCAAwC;QACxC,MAAM,cAAc,4JAAU,CAAC,eAAe,CAAC;YAC7C,SAAS;YACT,MAAM;gBACJ,MAAM,QAAQ,GAAG,CAAC,UAAU;gBAC5B,MAAM,QAAQ,GAAG,CAAC,UAAU;YAC9B;QACF;QAEA,gBAAgB;QAChB,MAAM,cAAc;YAClB,MAAM,QAAQ,GAAG,CAAC,UAAU;YAC5B,IAAI;YACJ,SAAS,CAAC,cAAc,EAAE,SAAS;YACnC,MAAM,CAAC;;;;;;;;sCAQyB,EAAE,KAAK;uCACN,EAAE,MAAM;YACnC,EAAE,UAAU,CAAC,6BAA6B,EAAE,QAAQ,IAAI,CAAC,GAAG,GAAG;yCAClC,EAAE,QAAQ;;;;;yDAKM,EAAE,QAAQ,OAAO,CAAC,OAAO,QAAQ;;;;;yCAKjD,EAAE,MAAM;;;;MAI3C,CAAC;QACH;QAEA,aAAa;QACb,MAAM,YAAY,QAAQ,CAAC;QAE3B,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAA0B,GACrC;YAAE,QAAQ;QAAI;IAGlB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QAEtC,uCAAuC;QACvC,IAAI,eAAe;QACnB,IAAI,iBAAiB,OAAO;YAC1B,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,kBAAkB;gBAC3C,eAAe;YACjB,OAAO,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,0BAA0B;gBAC1D,eAAe;YACjB,OAAO;gBACL,eAAe,CAAC,aAAa,EAAE,MAAM,OAAO,EAAE;YAChD;QACF;QAEA,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAa,GACtB;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}
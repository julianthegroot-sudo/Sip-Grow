{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Users/juliandegroot/Documents/Sip%26Grow2/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\n\n// Create Supabase client for server-side operations\nexport const supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\n// Database types for TypeScript support\nexport interface Subscriber {\n  id: string;\n  email: string;\n  created_at: string;\n}\n"],"names":[],"mappings":";;;;AAAA;;AAGO,MAAM,WAAW,IAAA,yMAAY","debugId":null}},
    {"offset": {"line": 102, "column": 0}, "map": {"version":3,"sources":["file:///Users/juliandegroot/Documents/Sip%26Grow2/src/app/api/subscribe/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { supabase } from '@/lib/supabase';\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Parse the request body to get the email\n    const body = await request.json();\n    const { email } = body;\n\n    // Validate that email is provided and not empty\n    if (!email || email.trim() === '') {\n      return NextResponse.json(\n        { \n          success: false, \n          error: 'Email is required' \n        },\n        { status: 400 }\n      );\n    }\n\n    // Validate email format using a simple regex\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(email.trim())) {\n      return NextResponse.json(\n        { \n          success: false, \n          error: 'Please enter a valid email address' \n        },\n        { status: 400 }\n      );\n    }\n\n    // Normalize the email (trim and convert to lowercase)\n    const normalizedEmail = email.trim().toLowerCase();\n\n    // Check if email already exists in Supabase\n    const { data: existingSubscriber, error: checkError } = await supabase\n      .from('subscribers')\n      .select('email')\n      .eq('email', normalizedEmail)\n      .single();\n\n    // Handle database errors\n    if (checkError && checkError.code !== 'PGRST116') { // PGRST116 = no rows returned\n      console.error('Error checking existing email:', checkError);\n      return NextResponse.json(\n        { \n          success: false, \n          error: 'Database error occurred' \n        },\n        { status: 500 }\n      );\n    }\n\n    // If email already exists, return error\n    if (existingSubscriber) {\n      return NextResponse.json(\n        { \n          success: false, \n          error: 'This email is already subscribed' \n        },\n        { status: 409 }\n      );\n    }\n\n    // Insert the new email into Supabase\n    const { data: newSubscriber, error: insertError } = await supabase\n      .from('subscribers')\n      .insert([\n        { email: normalizedEmail }\n      ])\n      .select()\n      .single();\n\n    // Handle insertion errors\n    if (insertError) {\n      console.error('Error inserting email:', insertError);\n      return NextResponse.json(\n        { \n          success: false, \n          error: 'Failed to save email subscription' \n        },\n        { status: 500 }\n      );\n    }\n\n    // Return success response\n    return NextResponse.json(\n      { \n        success: true, \n        message: 'Successfully subscribed to newsletter!',\n        email: normalizedEmail\n      },\n      { status: 200 }\n    );\n\n  } catch (error) {\n    console.error('Error in subscribe API:', error);\n    return NextResponse.json(\n      { \n        success: false, \n        error: 'Internal server error' \n      },\n      { status: 500 }\n    );\n  }\n}\n\n// Optional: Add a GET endpoint to retrieve all emails (for admin purposes)\nexport async function GET() {\n  try {\n    // Fetch all subscribers from Supabase\n    const { data: subscribers, error } = await supabase\n      .from('subscribers')\n      .select('id, email, created_at')\n      .order('created_at', { ascending: false });\n\n    // Handle database errors\n    if (error) {\n      console.error('Error fetching subscribers:', error);\n      return NextResponse.json(\n        { \n          success: false, \n          error: 'Failed to retrieve subscribers' \n        },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json(\n      { \n        success: true, \n        subscribers: subscribers || [],\n        count: subscribers?.length || 0\n      },\n      { status: 200 }\n    );\n  } catch (error) {\n    console.error('Error in GET subscribers API:', error);\n    return NextResponse.json(\n      { \n        success: false, \n        error: 'Internal server error' \n      },\n      { status: 500 }\n    );\n  }\n}\n\n"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,0CAA0C;QAC1C,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,KAAK,EAAE,GAAG;QAElB,gDAAgD;QAChD,IAAI,CAAC,SAAS,MAAM,IAAI,OAAO,IAAI;YACjC,OAAO,gJAAY,CAAC,IAAI,CACtB;gBACE,SAAS;gBACT,OAAO;YACT,GACA;gBAAE,QAAQ;YAAI;QAElB;QAEA,6CAA6C;QAC7C,MAAM,aAAa;QACnB,IAAI,CAAC,WAAW,IAAI,CAAC,MAAM,IAAI,KAAK;YAClC,OAAO,gJAAY,CAAC,IAAI,CACtB;gBACE,SAAS;gBACT,OAAO;YACT,GACA;gBAAE,QAAQ;YAAI;QAElB;QAEA,sDAAsD;QACtD,MAAM,kBAAkB,MAAM,IAAI,GAAG,WAAW;QAEhD,4CAA4C;QAC5C,MAAM,EAAE,MAAM,kBAAkB,EAAE,OAAO,UAAU,EAAE,GAAG,MAAM,oIAAQ,CACnE,IAAI,CAAC,eACL,MAAM,CAAC,SACP,EAAE,CAAC,SAAS,iBACZ,MAAM;QAET,yBAAyB;QACzB,IAAI,cAAc,WAAW,IAAI,KAAK,YAAY;YAChD,QAAQ,KAAK,CAAC,kCAAkC;YAChD,OAAO,gJAAY,CAAC,IAAI,CACtB;gBACE,SAAS;gBACT,OAAO;YACT,GACA;gBAAE,QAAQ;YAAI;QAElB;QAEA,wCAAwC;QACxC,IAAI,oBAAoB;YACtB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBACE,SAAS;gBACT,OAAO;YACT,GACA;gBAAE,QAAQ;YAAI;QAElB;QAEA,qCAAqC;QACrC,MAAM,EAAE,MAAM,aAAa,EAAE,OAAO,WAAW,EAAE,GAAG,MAAM,oIAAQ,CAC/D,IAAI,CAAC,eACL,MAAM,CAAC;YACN;gBAAE,OAAO;YAAgB;SAC1B,EACA,MAAM,GACN,MAAM;QAET,0BAA0B;QAC1B,IAAI,aAAa;YACf,QAAQ,KAAK,CAAC,0BAA0B;YACxC,OAAO,gJAAY,CAAC,IAAI,CACtB;gBACE,SAAS;gBACT,OAAO;YACT,GACA;gBAAE,QAAQ;YAAI;QAElB;QAEA,0BAA0B;QAC1B,OAAO,gJAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,SAAS;YACT,OAAO;QACT,GACA;YAAE,QAAQ;QAAI;IAGlB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gJAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO;QACT,GACA;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe;IACpB,IAAI;QACF,sCAAsC;QACtC,MAAM,EAAE,MAAM,WAAW,EAAE,KAAK,EAAE,GAAG,MAAM,oIAAQ,CAChD,IAAI,CAAC,eACL,MAAM,CAAC,yBACP,KAAK,CAAC,cAAc;YAAE,WAAW;QAAM;QAE1C,yBAAyB;QACzB,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,+BAA+B;YAC7C,OAAO,gJAAY,CAAC,IAAI,CACtB;gBACE,SAAS;gBACT,OAAO;YACT,GACA;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gJAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,aAAa,eAAe,EAAE;YAC9B,OAAO,aAAa,UAAU;QAChC,GACA;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO,gJAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO;QACT,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}
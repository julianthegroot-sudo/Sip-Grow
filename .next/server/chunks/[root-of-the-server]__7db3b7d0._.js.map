{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Users/juliandegroot/Documents/Sip%26Grow2/src/app/api/subscribe/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\n// Create Supabase client using environment variables\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\nconst supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\n\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nexport async function POST(request: NextRequest) {\n  console.log('üöÄ Subscribe API called');\n  \n  try {\n    // Parse the request body\n    const body = await request.json();\n    const { email } = body;\n\n    console.log('üìß Received email:', email);\n\n    // Validate email is provided\n    if (!email || email.trim() === '') {\n      console.log('‚ùå Validation failed: Email is required');\n      return NextResponse.json(\n        { \n          success: false, \n          error: 'Email is required' \n        },\n        { status: 400 }\n      );\n    }\n\n    // Validate email format\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(email.trim())) {\n      console.log('‚ùå Validation failed: Invalid email format');\n      return NextResponse.json(\n        { \n          success: false, \n          error: 'Please enter a valid email address' \n        },\n        { status: 400 }\n      );\n    }\n\n    // Normalize email (trim and lowercase)\n    const normalizedEmail = email.trim().toLowerCase();\n    console.log('üìß Normalized email:', normalizedEmail);\n\n    // Check if email already exists\n    console.log('üîç Checking for existing email...');\n    const { data: existingSubscriber, error: checkError } = await supabase\n      .from('subscribers')\n      .select('email')\n      .eq('email', normalizedEmail)\n      .single();\n\n    // Log the check result\n    if (checkError) {\n      console.log('üîç Check error (this might be normal if no record exists):', checkError.message);\n      console.log('üîç Check error code:', checkError.code);\n    } else {\n      console.log('üîç Found existing subscriber:', existingSubscriber);\n    }\n\n    // If email already exists (and no error occurred), return error\n    if (existingSubscriber && !checkError) {\n      console.log('‚ùå Email already exists');\n      return NextResponse.json(\n        { \n          success: false, \n          error: 'This email is already subscribed' \n        },\n        { status: 409 }\n      );\n    }\n\n    // Insert the new email\n    console.log('üíæ Attempting to insert email...');\n    const { data: newSubscriber, error: insertError } = await supabase\n      .from('subscribers')\n      .insert([\n        { email: normalizedEmail }\n      ])\n      .select()\n      .single();\n\n    // Log the insert result\n    if (insertError) {\n      console.error('‚ùå Insert failed:', insertError);\n      console.error('‚ùå Insert error message:', insertError.message);\n      console.error('‚ùå Insert error code:', insertError.code);\n      console.error('‚ùå Insert error details:', insertError.details);\n      console.error('‚ùå Insert error hint:', insertError.hint);\n      \n      // Return specific error messages based on the error\n      let errorMessage = 'Failed to save email subscription';\n      \n      if (insertError.code === '23505') {\n        errorMessage = 'This email is already subscribed';\n      } else if (insertError.code === '42501') {\n        errorMessage = 'Permission denied. Please check your database policies.';\n      } else if (insertError.message.includes('duplicate key')) {\n        errorMessage = 'This email is already subscribed';\n      }\n      \n      return NextResponse.json(\n        { \n          success: false, \n          error: errorMessage,\n          debug: {\n            code: insertError.code,\n            message: insertError.message,\n            details: insertError.details\n          }\n        },\n        { status: 500 }\n      );\n    }\n\n    console.log('‚úÖ Insert successful:', newSubscriber);\n    \n    // Return success response\n    return NextResponse.json(\n      { \n        success: true, \n        message: 'Successfully subscribed to newsletter!',\n        email: normalizedEmail\n      },\n      { status: 200 }\n    );\n\n  } catch (error) {\n    console.error('üí• Unexpected error in subscribe API:', error);\n    return NextResponse.json(\n      { \n        success: false, \n        error: 'Internal server error',\n        debug: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n// Optional: GET endpoint to retrieve all subscribers (for admin purposes)\nexport async function GET() {\n  console.log('üìã GET subscribers called');\n  \n  try {\n    const { data: subscribers, error } = await supabase\n      .from('subscribers')\n      .select('id, email, created_at')\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      console.error('‚ùå Error fetching subscribers:', error);\n      return NextResponse.json(\n        { \n          success: false, \n          error: 'Failed to retrieve subscribers',\n          debug: error\n        },\n        { status: 500 }\n      );\n    }\n\n    console.log('‚úÖ Retrieved subscribers:', subscribers?.length || 0);\n    return NextResponse.json(\n      { \n        success: true, \n        subscribers: subscribers || [],\n        count: subscribers?.length || 0\n      },\n      { status: 200 }\n    );\n  } catch (error) {\n    console.error('üí• Unexpected error in GET subscribers:', error);\n    return NextResponse.json(\n      { \n        success: false, \n        error: 'Internal server error',\n        debug: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}